{"remainingRequest":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/src/components/release_convene/Convene.vue?vue&type=style&index=0&id=c42056ee&lang=less&scoped=true&","dependencies":[{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/src/components/release_convene/Convene.vue","mtime":1608238814000},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/css-loader/dist/cjs.js","mtime":1670653172634},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1670653169681},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/postcss-loader/src/index.js","mtime":1670653170640},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/less-loader/dist/cjs.js","mtime":1670653171471},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1670653172899},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/vue-loader/lib/index.js","mtime":1670653169666}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmRpdj5oMiB7CiAgdGV4dC1hbGlnbjogY2VudGVyOwp9Cgo="},{"version":3,"sources":["Convene.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+KA;AACA;AACA","file":"Convene.vue","sourceRoot":"src/components/release_convene","sourcesContent":["<template>\n    <div>\n        <!-- 面包屑 -->\n        <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n            <el-breadcrumb-item :to=\"{ path: '/welcome' }\">首页</el-breadcrumb-item>\n            <el-breadcrumb-item>令主</el-breadcrumb-item>\n            <el-breadcrumb-item>发布召集令</el-breadcrumb-item>\n        </el-breadcrumb>\n        <!-- 发布召集令主体 -->\n        <h2>填写相关信息</h2>\n        <el-form :model=\"callForm\" :rules=\"callRules\" ref=\"callFormRef\" label-width=\"120px\">\n            <el-form-item label=\"召集令类型\" prop=\"typeName\">\n                <el-select v-model=\"callForm.typeId\" placeholder=\"请选择召集令类型\" @change=\"showMessage($event)\">\n                    <el-option\n                        v-for=\"item in callOption\"\n                        :key=\"item.callTypeId\"\n                        :label=\"item.callTypeName\"\n                        :value=\"item.callTypeId\"\n                    >\n                    </el-option>\n                </el-select>\n            </el-form-item>\n            <el-form-item label=\"召集令名称\" prop=\"name\">\n                <el-input v-model=\"callForm.name\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"召集令描述\" prop=\"description\">\n                <el-input type=\"textarea\" v-model=\"callForm.description\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"召集人数\" prop=\"peopleCount\">\n                <el-input v-model=\"callForm.peopleCount\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"召集结束日期\" required>\n                <el-col :span=\"11\">\n                <el-form-item prop=\"endTime\">\n                    <el-date-picker type=\"datetime\" placeholder=\"选择日期\" v-model=\"callForm.endTime\" value-format=\"yyyy-MM-dd HH:mm:ss\" :picker-options=\"expireTimeOption\" style=\"width: 100%;\"></el-date-picker>\n                </el-form-item>\n                </el-col>\n            </el-form-item>\n            <!-- 提交按钮 -->\n            <el-form-item>\n                <el-button type=\"primary\" @click=\"submit()\">发布</el-button>\n                <el-button type=\"info\" @click=\"reset()\">重置</el-button>\n            </el-form-item>\n        </el-form>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            callOption: [], // 召集令类型列表\n            callForm: {\n                userId: this.$store.state.user.id,\n                typeName: '',\n                name: '',\n                description: '',\n                endTime: '',\n                peopleCount: 3,\n                typeId: ''\n            },\n            expireTimeOption: {\n                disabledDate(date) {\n                    return date.getTime() <= Date.now();\n                }\n            },\n            callRules: {\n                typeName: [\n                    { required: true, message: '请选择召集令类型', trigger: 'blur' },\n                ],\n                name: [\n                    { required: true, message: '请输入召集令名称', trigger: 'blur' },\n                ],\n                description: [\n                    { required: true, message: '请输入召集令描述', trigger: 'blur' },\n                ],\n                peopleCount: [\n                    { validator: this.check_cnt, trigger: 'blur' },\n                ],\n                endTime: [\n                    { required: true, message: '请选择召集令结束时间', trigger: 'blur'}\n                ]\n            }\n        }\n    },\n    created() {\n        var that = this\n        this.$http.get(\"/call/getCallType\", {\n                headers: {\n                    'Authorization': window.sessionStorage.getItem('token') \n                }\n        })\n        .then(function(response) {\n            if (response.data.code == 200) {\n                that.callOption = response.data.data\n            } else {\n                that.$message({showClose: true, message: response.data.message, type: 'warning'})\n            }\n        })\n        .catch(function(error) {\n            console.log(error)\n            that.$message({showClose: true, message: \"请求错误\", type: 'error'})\n        })\n    },\n    methods: {\n        // 检查召集人数\n        check_cnt(rule, value, callback) {\n            if (String(value).trim() == '') {\n                return callback(new Error('请输入召集人数'))\n            } else if (Number(value) <= 0 || Number(value) >=101) {\n                return callback(new Error('召集人数必须在1~100内'))\n            } else {\n                return callback()\n            }\n        },\n        showMessage(e) {\n            let obj = {};\n            obj = this.callOption.find((item)=>{ //这里的callOption就是上面遍历的数据源\n                return item.callTypeId === e;     //筛选出匹配数据\n            });\n            this.callForm.typeName = obj.callTypeName  // label\n            this.callForm.typeId = e            // value\n            console.log('changeOption', e, obj.callTypeName)\n        },\n        // 发布召集令\n        submit() {\n            console.log(this.callForm.endTime)\n            this.$refs.callFormRef.validate((valid) => {\n                if (!valid)\n                    return this.$message({\n                        showClose: true,\n                        message: '输入数据无效',\n                        type: 'warning',\n                    })\n\n                var config = {\n                    method: 'post',\n                    url: '/call/add',\n                    headers: { \n                        'Content-Type': 'application/json',\n                        'Authorization': window.sessionStorage.getItem('token') \n                    },\n                    data : this.callForm\n                };\n                var that = this\n                this.$http(config)\n                .then(function (response) {\n                    console.log(response.data, that.callForm.typeId, that.callForm.typeName);\n                    if (response.data.code == 200) {\n                        that.$router.push('/myconvene')\n                        window.sessionStorage.setItem('activeNav', '/myconvene')\n                        that.$store.commit('call/set_activeNav', '/myconvene')\n                        that.$message({ showClose: true, message: response.data.message,type: 'success'})\n                        that.uploadVisible = true\n                    } else {\n                        that.$message({showClose: true, message:response.data.message, type: 'error'})\n                    }\n                })\n                .catch(function (error) {\n                    console.log(error);\n                    return that.$message({showClose: true, message:'请求错误', type: 'error'})\n                });\n            })\n        },\n        // 重置\n        reset() {\n            console.log('reset convene form')\n            this.$refs.callFormRef.resetFields()\n        },\n    }\n    \n}\n</script>\n\n<style lang=\"less\" scoped>\ndiv>h2 {\n  text-align: center;\n}\n\n</style>"]}]}