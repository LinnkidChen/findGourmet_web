{"remainingRequest":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/src/components/Register.vue?vue&type=style&index=0&id=7bf3755a&lang=less&scoped=true&","dependencies":[{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/src/components/Register.vue","mtime":1608238814000},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/css-loader/dist/cjs.js","mtime":1670653172634},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1670653169681},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/postcss-loader/src/index.js","mtime":1670653170640},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/less-loader/dist/cjs.js","mtime":1670653171471},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1670653172899},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/vue-loader/lib/index.js","mtime":1670653169666}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNvbnRhaW5lciB7CiAgICBoZWlnaHQ6IDEwMCU7Cn0KLmhlYWRlciB7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICBmb250LXNpemU6IDQwcHg7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ3JleTsKfQoubWFpbiB7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICB3aWR0aDogNzAwcHg7CiAgICBtYXJnaW46IGF1dG87Cn0K"},{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Register.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <el-container class=\"container\">\n        <el-header class=\"header\">注册界面</el-header>\n        \n        <el-main class=\"main\">\n        <el-form :model=\"registerForm\" :rules=\"registerRules\" ref=\"registerFormRef\" label-width=\"100px\" class=\"demo-registerForm\" >\n            <el-form-item label=\"用户名\" prop=\"username\">\n                <el-input v-model=\"registerForm.username\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"密码\" prop=\"password\">\n                <el-input v-model=\"registerForm.password\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"用户类型\" prop=\"userType\">\n            <el-select v-model=\"registerForm.userType\" placeholder=\"请选择用户类型\" >\n                <el-option label=\"系统管理员\" value=\"false\" :disabled=\"true\"></el-option>\n                <el-option label=\"普通用户\" value=\"true\"></el-option>\n            </el-select>\n            </el-form-item>\n            <el-form-item label=\"用户姓名\" prop=\"name\">\n                <el-input v-model=\"registerForm.name\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"证件类型\" prop=\"documentTypeId\">\n                <el-select v-model=\"registerForm.documentTypeId\" placeholder=\"请选择证件类型\" >\n                    <!-- 动态获取证件类型下拉列表 :key好像没有很大作用？-->\n                    <el-option\n                        v-for=\"item in documentTypeOption\"\n                        :key=\"item.documentTypeId\"\n                        :label=\"item.documentTypeName\"\n                        :value=\"item.documentTypeId\"\n                    >\n                    </el-option>\n                </el-select>\n            </el-form-item>\n            <el-form-item label=\"证件号码\" prop=\"documentNumber\">\n                <el-input v-model=\"registerForm.documentNumber\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"手机号码\" prop=\"phoneNumber\">\n                <el-input v-model=\"registerForm.phoneNumber\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"用户简介\" prop=\"introduce\">\n                <el-input type=\"textarea\" v-model=\"registerForm.introduce\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"城市\" prop=\"cityId\">\n                <el-select v-model=\"registerForm.cityId\" placeholder=\"请选择您的城市\" >\n                    <!-- 动态获取城市类型下拉列表 -->\n                    <el-option\n                        v-for=\"item in cityOption\"\n                        :key=\"item.cityId\"\n                        :label=\"item.cityName\"\n                        :value=\"item.cityId\"\n                    >\n                    </el-option>\n                </el-select>\n            </el-form-item>\n            <!-- 提交按钮 -->\n            <el-form-item>\n                <el-button type=\"primary\" @click=\"submitForm('registerForm')\">立即注册</el-button>\n                <el-button @click=\"resetForm('registerForm')\">重置</el-button>\n            </el-form-item>\n        </el-form>\n        </el-main>\n    </el-container>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n        // 注册表单\n        registerForm: {\n            username: '',\n            password: '',\n            userType: '',\n            name: '',\n            documentTypeId: '',\n            documentNumber: '',\n            phoneNumber: '15577778888',\n            level: 1,\n            introduce: '',\n            cityId: '',\n        },\n        documentTypeOption: [], // 证件类型列表\n        cityOption: [],         // 城市列表\n        // 表单规则\n        registerRules: {\n            username: [\n                { required: true, message: '请输入用户名', trigger: 'blur' },\n            ],\n            password: [\n                { required: true, message: '请输出密码', trigger: 'blur' },\n                { validator: this.check_pwd, trigger: 'blur' },\n            ],\n            userType: [\n                { required: true, message: '请选择用户类型', trigger: 'blur' },\n            ],\n            name: [\n                { required: true, message: '请输入用户姓名', trigger: 'blur' }\n            ],\n            documentTypeId: [\n                { required: true, message: '请选择证件类型', trigger: 'blur' },\n            ],\n            documentNumber: [\n                { required: true, validator: this.check_cardType, trigger: 'blur' },\n            ],\n            phoneNumber: [\n                { required: true, validator: this.check_phone, trigger: 'blur' },\n            ],\n            cityId: [\n                { required: true, message: '请选择城市名称', trigger: 'blur' }\n            ],\n        },\n        }\n    },\n    created() {\n        /* \n        // 如果使用这个调用这个接口需要安装redis\n        var that = this\n        this.$http.get('/user/getDocuments')\n        .then(function(response) {\n            if (response.data.code == 200) {\n                that.documentTypeOption = response.data.data\n            } else {\n                that.$message({showClose: true, message: response.data.message, type: 'warning'})\n            }\n        })\n        .catch(function(response) {\n            that.$message({showClose: true, message: \"请求错误\", type: 'error'})\n        })\n        this.$http.get('/user/getCitys')\n        .then(function(response) {\n            if (response.data.code == 200) {\n                that.cityOption = response.data.data\n            } else {\n                that.$message({showClose: true, message: response.data.message, type: 'warning'})\n            }\n        })\n        .catch(function(response) {\n            that.$message({showClose: true, message: \"请求错误\", type: 'error'})\n        }) */\n        this.documentTypeOption = [\n            {\n              \"documentTypeId\": 1,\n              \"documentTypeName\": \"身份证\"\n            },\n            {\n              \"documentTypeId\": 2,\n              \"documentTypeName\": \"学生证\"\n            }\n        ]\n        this.cityOption = [\n            {\n              \"cityId\": 1,\n              \"cityName\": \"北京\"\n            },\n            {\n              \"cityId\": 2,\n              \"cityName\": \"上海\"\n            }\n        ]\n    },\n    methods: {\n        // 自定义校验规则，检查密码\n        check_pwd(rule, value, callback) {\n            // rule 对应使用bargainMoney自定义验证的 对象\n            // value 对应使用bargainMoney自定义验证的 数值\n            // callback 回调函数\n            var regex = new RegExp(/\\d/, 'g')\n            if (String(value).length < 6) {\n                return callback(new Error('长度不能小于6位'))\n            } else if (String(value).match(regex) < 2) {\n                return callback(new Error('必须含有两个数字'))\n            } else if (\n                /^[A-Z]+$/.test(String(value)) ||\n                /^[a-z]+$/.test(String(value))\n            ) {\n                return callback(new Error('不能全是大写字符或小写字符'))\n            } else {\n                return callback()\n            }\n        },\n        // 检查身份证号\n        check_cardType(rule, value, callback) {\n            const r = /\\d{17}[\\d|x]|\\d{15}/\n            const r1 = /^[0-9]*[1-9][0-9]*$/\n            if (String(value).trim() == '') {\n                return callback(new Error('请输入证件号码'))\n            } else if (this.documentTypeId == '1' && !r.test(String(value))) {\n                return callback(new Error('身份证号不合规则'))\n            } else if (this.documentTypeId == '2' && !r1.test(String(value))) {\n                return callback(new Error('学生证不合规则'))\n            } else {\n                return callback()\n            }\n        },\n        // 检查手机号码\n        check_phone(rule, value, callback) {\n            const r = /0?(13|14|15|17|18)[0-9]{9}/\n            if (String(value).trim() == '') {\n                return callback(new Error('请输入手机号'))\n            } else if (!r.test(String(value))) {\n                return callback(new Error('手机号不合规则'))\n            } else {\n                return callback()\n            }\n        },\n\n        submitForm(formName) {\n            var that = this\n            this.$refs.registerFormRef.validate((valid) => {\n                if (!valid)\n                return this.$message({\n                    showClose: true,\n                    message: '输入数据无效',\n                    type: 'warning',\n                })\n                // post配置\n                var config = {\n                    method: 'post',\n                    url: '/user/register',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    data: JSON.stringify(this.registerForm),\n                }\n                // 向服务器发起请求\n                this.$http(config)\n                .then(function (response) {\n                    // console.log(response.data)\n                    if (response.data.code == '200') {\n                        that.$message({ showClose: true, message: '注册成功',type: 'success'})\n                        that.$router.push('/login')\n                    } else {\n                        that.$message({showClose: true, message: response.data.message, type: 'error'})\n                    }\n                })\n                .catch(function (error) {\n                    console.log(error)\n                    return that.$message({showClose: true, message:'请求错误', type: 'error'})\n                })\n            })\n        },\n        resetForm(formName) {\n            this.$refs.registerFormRef.resetFields()\n        },\n    },\n}\n</script>\n\n<style lang=\"less\" scoped>\n.container {\n    height: 100%;\n}\n.header {\n    text-align: center;\n    font-size: 40px;\n    background-color: darkgrey;\n}\n.main {\n    height: 100%;\n    width: 700px;\n    margin: auto;\n}\n</style>\n"]}]}