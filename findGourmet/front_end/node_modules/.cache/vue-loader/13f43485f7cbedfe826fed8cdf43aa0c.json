{"remainingRequest":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/src/components/Login.vue?vue&type=style&index=0&id=ef68022e&lang=less&scoped=true&","dependencies":[{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/src/components/Login.vue","mtime":1670662650754},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/css-loader/dist/cjs.js","mtime":1670653172634},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1670653169681},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/postcss-loader/src/index.js","mtime":1670653170640},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/less-loader/dist/cjs.js","mtime":1670653171471},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1670653172899},{"path":"/Users/tongchen/Downloads/findGourmet_web/findGourmet/front_end/node_modules/vue-loader/lib/index.js","mtime":1670653169666}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgovLyBzY29wZWQg6KGo56S6Y3Nz5Y+q5Zyo5pys57uE5Lu255Sf5pWICi5sb2dpbl9jb250YWluZXIgewogIGJhY2tncm91bmQtY29sb3I6IGdyYXk7CiAgaGVpZ2h0OiAxMDAlOwp9Ci5sb2dpbl9ib3ggewogIHdpZHRoOiA0NTBweDsKICBoZWlnaHQ6IDMwMHB4OwogIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogIGJvcmRlci1yYWRpdXM6IDNweDsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgbGVmdDogNTAlOwogIHRvcDogNTAlOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOwp9Ci5hdmF0YXJfYm94IHsKICBoZWlnaHQ6IDEzMHB4OwogIHdpZHRoOiAxMzBweDsKICBib3JkZXItcmFkaXVzOiA1MCU7CiAgYm9yZGVyOiAxcHggc29saWQgI2VlZWVlZTsKICBwYWRkaW5nOiAxMHB4OwogIGJveC1zaGFkb3c6IDAgMCAxMHB4ICNkZGRkZGQ7CiAgYm94LXNpemluZzogY29udGVudC1ib3g7CiAgLy8gIOWxheS4reaYvuekugogIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNDAlKTsKICBtYXJnaW46IGF1dG87CiAgLy8g5bGF5Lit5pi+56S6MgogIC8qIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBsZWZ0OiA1MCU7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTQwJSk7ICovCiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgaW1nIHsKICAgIGhlaWdodDogMTAwcHg7CiAgICBib3JkZXItcmFkaXVzOiAzMCU7CiAgICBwYWRkaW5nOiAxMCUgMTAlIDEwJSA2JTsKICB9Cn0KCi8vIOihqOWNleS9jee9ruaYvuekugoubG9naW5fZm9ybSB7CiAgcGFkZGluZzogMCAyMHB4OwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAvKiB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTIwJSk7ICovCiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICBib3R0b206IDA7CiAgd2lkdGg6IDEwMCU7Cn0KLy8g6Z2g5Y+z5pi+56S6Ci5idG5zIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7Cn0K"},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"login_container\">\n        <div class=\"login_box\">\n        <!-- 头像区域 -->\n        <div class=\"avatar_box\">\n            <img src=\"../assets/logo.png\" alt=\"LogoCall\" />\n        </div>\n        <!-- 登录表单区域 -->\n        <el-form\n            ref=\"loginFormRef\"\n            class=\"login_form\"\n            label-width=\"0px\"\n            :model=\"loginForm\"\n            :rules=\"loginFormRules\"\n        >\n            <el-form-item prop=\"username\">\n            <el-input\n                v-model=\"loginForm.username\"\n                prefix-icon=\"el-icon-user-solid\"\n            ></el-input>\n            </el-form-item>\n            <el-form-item prop=\"password\">\n            <el-input\n                v-model=\"loginForm.password\"\n                type=\"password\"\n                prefix-icon=\"el-icon-lock\"\n            ></el-input>\n            </el-form-item>\n            <el-form-item class=\"btns\">\n                <el-button type=\"primary\" @click=\"register()\" style=\"margin-right: 28px\">注册</el-button>\n                <el-button type=\"primary\" @click=\"login('admin')\">管理员登录</el-button>\n                <el-button type=\"primary\" @click=\"login('common')\">用户登录</el-button>\n                <el-button type=\"info\" @click=\"resetLoginForm()\">重置</el-button>\n            </el-form-item>\n        </el-form>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n        // 登录表单数据绑定对象\n        loginForm: {\n            username: '',\n            password: '',\n        },\n        // 表单验证规则\n        loginFormRules: {\n            username: [\n                { required: true, message: '请输入用户名', trigger: 'blur' },\n            ],\n            password: [\n                { required: true, message: '请输入密码', trigger: 'blur' },\n            ],\n        },\n        }\n    },\n    methods: {\n        // 重置函数\n        resetLoginForm() {\n        console.log('重置函数：', 'resetLoginForm()')\n        // 获取表单的引用对象，然后调取表单的重置函数\n        this.$refs.loginFormRef.resetFields()\n        },\n        // 登录函数\n        login(kind) {\n            this.$refs.loginFormRef.validate(async (valid) => {\n                // 如果不合规范直接警告\n                if (!valid) return that.$message({showClose: true, message:'输入数据无效', type: 'warning'})\n                // 如果合乎规范就post，注意构造方法\n                var qs = require('qs')\n                var data = qs.stringify(this.loginForm)\n                if (kind == 'admin') {\n                    var url = '/api/user/adminLogin/'\n                } else {\n                    var url = '/api/user/login/'\n                }\n                var config = {\n                    method: 'post',\n                    url: url,\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                    },\n                    data: data,\n                }\n                var that = this // 注意这里需要保存原来this\n                this.$http(config)\n                .then(function (response) {\n                    console.log(response.data, data, url)\n                    if (response.status == '200') {\n                        // 将登陆成功之后的token保存在sessionStorage中 --token只在当前网站打开期间生效,其他接口必须登陆之后才能访问\n                        window.sessionStorage.setItem('token', response.data.token)\n                        // 根据用户名查找用户信息\n                        var conf = {\n                                method: 'get',\n                                url: '/api/user/getByUserName/'+that.loginForm.username,\n                                headers: {\n                                    'Authorization':\"Bearer \"+ window.sessionStorage.getItem('token')\n                            },\n                                // \"Bearer + <token>\"\n                            }\n                        var axios = require('axios');\n                        axios(conf)\n                        .then(function(response) {\n                            console.log(response.data)\n                            if (response.status == 200) {\n                                that.$router.push('/home')\n                                // 调用方法\n                                console.log(response.data, that.loginForm)\n                                that.$store.commit('user/set_userInfo', response.data.data)\n                                return that.$message({ showClose: true, message: '登录成功', type: 'success' })\n                            } else {\n                                return that.$message({showClose: true, message: '登录失败', type: 'error'})\n                            }\n                        })\n                        .catch(function(response) {\n                            return that.$message({showClose: true, message:'请求错误', type: 'error'})\n                        })\n                    } else {\n                        return that.$message({showClose: true, message: response.data.message, type: 'error'})\n                    }\n                    \n                })\n                .catch(function (error) {\n                    console.log(error)\n                    return that.$message({showClose: true, message:'请求错误', type: 'error'})\n                })\n            })\n        },\n        // 注册函数\n        register() {\n            this.$router.push('/register')\n        },\n    },\n    }\n</script>\n\n<style lang=\"less\" scoped>\n// scoped 表示css只在本组件生效\n.login_container {\n  background-color: gray;\n  height: 100%;\n}\n.login_box {\n  width: 450px;\n  height: 300px;\n  background-color: white;\n  border-radius: 3px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n}\n.avatar_box {\n  height: 130px;\n  width: 130px;\n  border-radius: 50%;\n  border: 1px solid #eeeeee;\n  padding: 10px;\n  box-shadow: 0 0 10px #dddddd;\n  box-sizing: content-box;\n  //  居中显示\n  transform: translateY(-40%);\n  margin: auto;\n  // 居中显示2\n  /* position: absolute;\n  left: 50%;\n  transform: translate(-50%, -40%); */\n  background-color: white;\n  img {\n    height: 100px;\n    border-radius: 30%;\n    padding: 10% 10% 10% 6%;\n  }\n}\n\n// 表单位置显示\n.login_form {\n  padding: 0 20px;\n  position: absolute;\n  /* transform: translateY(-20%); */\n  box-sizing: border-box;\n  bottom: 0;\n  width: 100%;\n}\n// 靠右显示\n.btns {\n  display: flex;\n  justify-content: flex-end;\n}\n</style>\n"]}]}